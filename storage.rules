rules_version = '2';

// Craft rules based on data in your Firestore database
// allow write: if firestore.get(
//    /databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin;
service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read, write: if false;
    }

    // Images can either be .png or .jpg in order for them to be acceptable.
    function isValidContentType(data) {
      return data.contentType in ['image/png', 'image/jpg'];
    }

    function isValidFileExtension(fileName) {
      return fileName.matches('(?i:.*[.]png)');
    }

    // Images must be less than 10MB
    function isValidFileSize(data) {
      return data.size < 10 * 1024 * 1024;
    }

    // Done Unit Testing, Except For The Update Operation.
    match /store_owners/stores_images/{storeImage} {
      
      //Only unregistered users can create a store image during registration. 
      allow create: if request.auth != null && 

      // Make sure authenticated user's uid is the same as the document id of this image.
      request.auth.uid == storeImage &&

      // Make sure a store whose owner has a phone number which is the same as this document id does not alredy exist.
      firestore.exists(/databases/(default)/documents/stores/
      $(request.auth.uid))==false &&
      firestore.exists(/databases/(default)/documents/store_owners/
      $(request.auth.uid))==false &&

      
      isValidFileSize(request.resource);// && 
      //isValidContentType(request.resource);
       
      allow read; // Anybody can view  stores images.

      // No one can delete a store image.
      allow update, delete: if false;
    }

    // Done Unit Testing, Except For The Update Operation.
    match /store_owners/store_owners_images/{storeOwnerImage} {

      // Only unregistered users can create a store owner image during store registration.
      allow create: if request.auth != null && 

      // Make sure authenticated user's uid is the same as the document id of this image.
      request.auth.uid == storeOwnerImage &&

      // Make sure the store already exist whereas the store owner with the same phone number isn't.
      firestore.exists(/databases/(default)/documents/stores/
      $(request.auth.uid)) &&
      firestore.exists(/databases/(default)/documents/store_owners/
      $(request.auth.uid))==false &&

      isValidFileSize(request.resource);// && 
      //isValidContentType(request.resource);

      allow read; // Anybody can view  store owners images.

      // No one can delete a store owner image.
      allow update, delete: if false;
      
    }

    // Done Unit Testing, Except For The Update Operation.
    match /store_owners/store_owners_ids/{storeOwnerIdentityDocument} {

      allow create: if request.auth != null && 

      // Make sure authenticated user's uid is the same as the document id of this image.
      request.auth.uid == storeOwnerIdentityDocument &&

      // Make sure the store already exist whereas the store owner with the same phone number isn't.
      firestore.exists(/databases/(default)/documents/stores/
      $(request.auth.uid)) &&
      firestore.exists(/databases/(default)/documents/store_owners/
      $(request.auth.uid))==false &&

      isValidFileSize(request.resource);// && 
      //isValidContentType(request.resource);

      allow read: if request.auth.uid != null &&
      (request.auth.uid==storeOwnerIdentityDocument ||
      firestore.get(/databases/(default)/documents/store_owners/
      $(request.auth.uid)).data.isAdmin
      );

      // No one can delete any saved identity documents.
      allow update, delete: if false;
    }

    match /grand_prices_images/{storeDrawPricesId} {
      // Store owners can only create their store image
      // which also have acceptable size and format.
      allow create: if request.auth != null && 

      firestore.exists(/databases/(default)/documents/store_owners/
      $(request.auth.uid)) &&
      
      isValidFileSize(request.resource);// && 
      //isValidContentType(request.resource);
       
      allow read; // Anybody can view  stores images.

      // No one can delete a store image.
      allow update, delete: if false;
    }
    
    // Done Unit Testing, Except For The Update Operation.
    match /alcoholics/profile_images/{profileImage} {

      allow create: if request.auth != null && 

      // Make sure authenticated user's uid is the same as the document id of this image.
      request.auth.uid == profileImage &&

      // Make sure there is no user already using the new user's phone number.
      firestore.exists(/databases/(default)/documents/alcoholics/
      $(request.auth.uid))==false &&
      firestore.exists(/databases/(default)/documents/store_owners/
      $(request.auth.uid))==false &&
      
      isValidFileSize(request.resource);// && 
      //isValidContentType(request.resource);

      allow read; // Anybody can view  store owners images.

      // No one can delete a store owner image.
      allow update, delete: if false;
      
    }

    match /groups_specific_locations/{locationImage} {

      // Make sure the user is authenticated.
      allow create: if request.auth != null && 

      // Make sure authenticated user's uid is the same as the document id of this image.
      request.auth.uid == locationImage &&

      // Make sure the current user does not have an existing group.
      firestore.exists(/databases/(default)/documents/groups/
      $(request.auth.uid))==false &&
      
      isValidFileSize(request.resource);// && 
      //isValidContentType(request.resource);

      allow read; // Anybody can view  store owners images.

      // No one can delete a store owner image.
      allow update, delete: if false;
      
    }

    match /group_members/{creatorPhoneNumber}/{memberPhoneNumber} {
      //allow read;
      allow list;
      allow get;
      allow write;
    }

  }
}
